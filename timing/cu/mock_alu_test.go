// Code generated by MockGen. DO NOT EDIT.
// Source: ../../emu/alu.go

// Package cu is a generated GoMock package.
package cu

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vm "github.com/sarchlab/akita/v3/mem/vm"
	emu "github.com/sarchlab/mgpusim/v3/emu"
	insts "github.com/sarchlab/mgpusim/v3/insts"
)

// MockInstEmuState is a mock of InstEmuState interface.
type MockInstEmuState struct {
	ctrl     *gomock.Controller
	recorder *MockInstEmuStateMockRecorder
}

// MockInstEmuStateMockRecorder is the mock recorder for MockInstEmuState.
type MockInstEmuStateMockRecorder struct {
	mock *MockInstEmuState
}

// NewMockInstEmuState creates a new mock instance.
func NewMockInstEmuState(ctrl *gomock.Controller) *MockInstEmuState {
	mock := &MockInstEmuState{ctrl: ctrl}
	mock.recorder = &MockInstEmuStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstEmuState) EXPECT() *MockInstEmuStateMockRecorder {
	return m.recorder
}

// Inst mocks base method.
func (m *MockInstEmuState) Inst() *insts.Inst {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inst")
	ret0, _ := ret[0].(*insts.Inst)
	return ret0
}

// Inst indicates an expected call of Inst.
func (mr *MockInstEmuStateMockRecorder) Inst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inst", reflect.TypeOf((*MockInstEmuState)(nil).Inst))
}

// PID mocks base method.
func (m *MockInstEmuState) PID() vm.PID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PID")
	ret0, _ := ret[0].(vm.PID)
	return ret0
}

// PID indicates an expected call of PID.
func (mr *MockInstEmuStateMockRecorder) PID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PID", reflect.TypeOf((*MockInstEmuState)(nil).PID))
}

// ReadReg mocks base method.
func (m *MockInstEmuState) ReadReg(reg *insts.Reg, regCount, laneID int) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReg", reg, regCount, laneID)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ReadReg indicates an expected call of ReadReg.
func (mr *MockInstEmuStateMockRecorder) ReadReg(reg, regCount, laneID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReg", reflect.TypeOf((*MockInstEmuState)(nil).ReadReg), reg, regCount, laneID)
}

// ReadReg2Plus mocks base method.
func (m *MockInstEmuState) ReadReg2Plus(reg *insts.Reg, regCount, laneID int, buf []uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadReg2Plus", reg, regCount, laneID, buf)
}

// ReadReg2Plus indicates an expected call of ReadReg2Plus.
func (mr *MockInstEmuStateMockRecorder) ReadReg2Plus(reg, regCount, laneID, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReg2Plus", reflect.TypeOf((*MockInstEmuState)(nil).ReadReg2Plus), reg, regCount, laneID, buf)
}

// WriteReg mocks base method.
func (m *MockInstEmuState) WriteReg(reg *insts.Reg, regCount, laneID int, data uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteReg", reg, regCount, laneID, data)
}

// WriteReg indicates an expected call of WriteReg.
func (mr *MockInstEmuStateMockRecorder) WriteReg(reg, regCount, laneID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReg", reflect.TypeOf((*MockInstEmuState)(nil).WriteReg), reg, regCount, laneID, data)
}

// WriteReg2Plus mocks base method.
func (m *MockInstEmuState) WriteReg2Plus(reg *insts.Reg, regCount, laneID int, buf []uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteReg2Plus", reg, regCount, laneID, buf)
}

// WriteReg2Plus indicates an expected call of WriteReg2Plus.
func (mr *MockInstEmuStateMockRecorder) WriteReg2Plus(reg, regCount, laneID, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReg2Plus", reflect.TypeOf((*MockInstEmuState)(nil).WriteReg2Plus), reg, regCount, laneID, buf)
}

// MockALU is a mock of ALU interface.
type MockALU struct {
	ctrl     *gomock.Controller
	recorder *MockALUMockRecorder
}

// MockALUMockRecorder is the mock recorder for MockALU.
type MockALUMockRecorder struct {
	mock *MockALU
}

// NewMockALU creates a new mock instance.
func NewMockALU(ctrl *gomock.Controller) *MockALU {
	mock := &MockALU{ctrl: ctrl}
	mock.recorder = &MockALUMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockALU) EXPECT() *MockALUMockRecorder {
	return m.recorder
}

// LDS mocks base method.
func (m *MockALU) LDS() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LDS")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// LDS indicates an expected call of LDS.
func (mr *MockALUMockRecorder) LDS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LDS", reflect.TypeOf((*MockALU)(nil).LDS))
}

// ReadOperand mocks base method.
func (m *MockALU) ReadOperand(state emu.InstEmuState, operand *insts.Operand, laneID int, buf []uint32) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOperand", state, operand, laneID, buf)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ReadOperand indicates an expected call of ReadOperand.
func (mr *MockALUMockRecorder) ReadOperand(state, operand, laneID, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOperand", reflect.TypeOf((*MockALU)(nil).ReadOperand), state, operand, laneID, buf)
}

// Run mocks base method.
func (m *MockALU) Run(state emu.InstEmuState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", state)
}

// Run indicates an expected call of Run.
func (mr *MockALUMockRecorder) Run(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockALU)(nil).Run), state)
}

// SetLDS mocks base method.
func (m *MockALU) SetLDS(lds []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLDS", lds)
}

// SetLDS indicates an expected call of SetLDS.
func (mr *MockALUMockRecorder) SetLDS(lds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLDS", reflect.TypeOf((*MockALU)(nil).SetLDS), lds)
}

// WriteOperand mocks base method.
func (m *MockALU) WriteOperand(state emu.InstEmuState, operand *insts.Operand, laneID int, data uint64, buf []uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteOperand", state, operand, laneID, data, buf)
}

// WriteOperand indicates an expected call of WriteOperand.
func (mr *MockALUMockRecorder) WriteOperand(state, operand, laneID, data, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOperand", reflect.TypeOf((*MockALU)(nil).WriteOperand), state, operand, laneID, data, buf)
}
